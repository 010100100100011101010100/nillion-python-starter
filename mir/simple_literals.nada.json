{"functions":[],"parties":[{"name":"Party1","source_ref":{"file":"simple_literals.py","lineno":5,"offset":42,"length":33}}],"inputs":[{"type":{"Secret":{"Integer":null}},"party":"Party1","name":"A","doc":"","source_ref":{"file":"simple_literals.py","lineno":6,"offset":76,"length":52}},{"type":{"Secret":{"Integer":null}},"party":"Party1","name":"C","doc":"","source_ref":{"file":"simple_literals.py","lineno":7,"offset":129,"length":52}}],"literals":[{"name":"deb071dba4408a8bff7335d2a73ea3b0","value":"13","type":{"Literal":{"Integer":null}}},{"name":"ad7c2ff3cfd7a5960c8fc7833168f714","value":"50","type":{"Literal":{"Integer":null}}},{"name":"d36c7fd32f7341e589c147cdc008787a","value":"63","type":{"Literal":{"Integer":null}}},{"name":"4fe75da7cee51956b0ebad9217fcc658","value":"650","type":{"Literal":{"Integer":null}}}],"outputs":[{"name":"O","inner":{"Addition":{"left":{"Addition":{"left":{"Addition":{"left":{"Addition":{"left":{"Multiplication":{"left":{"InputReference":{"refers_to":"A","type":{"Secret":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":6,"offset":76,"length":52}}},"right":{"LiteralReference":{"refers_to":"deb071dba4408a8bff7335d2a73ea3b0","type":{"Literal":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":9,"offset":183,"length":96}}},"type":{"Secret":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":9,"offset":183,"length":96}}},"right":{"LiteralReference":{"refers_to":"deb071dba4408a8bff7335d2a73ea3b0","type":{"Literal":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":9,"offset":183,"length":96}}},"type":{"Secret":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":9,"offset":183,"length":96}}},"right":{"Multiplication":{"left":{"InputReference":{"refers_to":"C","type":{"Secret":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":7,"offset":129,"length":52}}},"right":{"LiteralReference":{"refers_to":"ad7c2ff3cfd7a5960c8fc7833168f714","type":{"Literal":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":10,"offset":280,"length":62}}},"type":{"Secret":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":10,"offset":280,"length":62}}},"type":{"Secret":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":14,"offset":472,"length":33}}},"right":{"LiteralReference":{"refers_to":"d36c7fd32f7341e589c147cdc008787a","type":{"Literal":{"Integer":null}},"source_ref":{"file":"integer.py","lineno":26,"offset":1003,"length":63}}},"type":{"Secret":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":14,"offset":472,"length":33}}},"right":{"LiteralReference":{"refers_to":"4fe75da7cee51956b0ebad9217fcc658","type":{"Literal":{"Integer":null}},"source_ref":{"file":"integer.py","lineno":54,"offset":2437,"length":63}}},"type":{"Secret":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":14,"offset":472,"length":33}}},"party":"Party1","type":{"Secret":{"Integer":null}},"source_ref":{"file":"simple_literals.py","lineno":16,"offset":0,"length":0}}],"source_files":{"integer.py":"# This file is automatically generated. Do not edit!\n\nfrom . import NadaType\nfrom dataclasses import dataclass\nfrom nada_dsl.circuit_io import Literal\nfrom nada_dsl.nada_types.boolean import Boolean, PublicBoolean, SecretBoolean\nfrom nada_dsl.operations import Addition, Division, Equals, GreaterOrEqualThan, GreaterThan, LeftShift, LessOrEqualThan, LessThan, Modulo, Multiplication, Power, RightShift, Subtraction\nfrom nada_dsl.source_ref import SourceRef\nfrom typing import Union\n\n@dataclass\nclass Integer(NadaType):\n    value: int\n\n    def __init__(self, value: int):\n        super().__init__(inner=Literal(value=value, source_ref=SourceRef.back_frame()))\n        if isinstance(value, int):\n            self.value = value\n        else:\n            raise ValueError(f\"Expected int, got {type(value).__name__}\")\n\n    def __add__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]:\n        if isinstance(other, Integer):\n            return Integer(value=int(self.value + other.value))\n        elif isinstance(other, PublicInteger):\n            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} + {other}\")\n\n    def __sub__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]:\n        if isinstance(other, Integer):\n            return Integer(value=int(self.value - other.value))\n        elif isinstance(other, PublicInteger):\n            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} - {other}\")\n\n    def __mul__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]:\n        if isinstance(other, Integer):\n            return Integer(value=int(self.value * other.value))\n        elif isinstance(other, PublicInteger):\n            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} * {other}\")\n\n    def __truediv__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> Union[\"Integer\", \"PublicInteger\"]:\n        if isinstance(other, Integer):\n            return Integer(value=int(self.value / other.value))\n        elif isinstance(other, PublicInteger):\n            operation = Division(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} / {other}\")\n\n    def __mod__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> Union[\"Integer\", \"PublicInteger\"]:\n        if isinstance(other, Integer):\n            return Integer(value=int(self.value % other.value))\n        elif isinstance(other, PublicInteger):\n            operation = Modulo(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} % {other}\")\n\n    def __pow__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> Union[\"Integer\", \"PublicInteger\"]:\n        if isinstance(other, Integer):\n            return Integer(value=int(self.value ** other.value))\n        elif isinstance(other, PublicInteger):\n            operation = Power(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} ** {other}\")\n\n    def __lshift__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> Union[\"Integer\", \"PublicInteger\"]:\n        if isinstance(other, Integer):\n            return Integer(value=int(self.value << other.value))\n        elif isinstance(other, PublicInteger):\n            operation = LeftShift(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} << {other}\")\n\n    def __rshift__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> Union[\"Integer\", \"PublicInteger\"]:\n        if isinstance(other, Integer):\n            return Integer(value=int(self.value >> other.value))\n        elif isinstance(other, PublicInteger):\n            operation = RightShift(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} >> {other}\")\n\n    def __lt__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> Union[\"Boolean\", \"PublicBoolean\", \"SecretBoolean\"]:\n        if isinstance(other, Integer):\n            return Boolean(value=bool(self.value < other.value))\n        elif isinstance(other, PublicInteger):\n            operation = LessThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = LessThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} < {other}\")\n\n    def __gt__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> Union[\"Boolean\", \"PublicBoolean\", \"SecretBoolean\"]:\n        if isinstance(other, Integer):\n            return Boolean(value=bool(self.value > other.value))\n        elif isinstance(other, PublicInteger):\n            operation = GreaterThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = GreaterThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} > {other}\")\n\n    def __le__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> Union[\"Boolean\", \"PublicBoolean\", \"SecretBoolean\"]:\n        if isinstance(other, Integer):\n            return Boolean(value=bool(self.value <= other.value))\n        elif isinstance(other, PublicInteger):\n            operation = LessOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = LessOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} <= {other}\")\n\n    def __ge__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> Union[\"Boolean\", \"PublicBoolean\", \"SecretBoolean\"]:\n        if isinstance(other, Integer):\n            return Boolean(value=bool(self.value >= other.value))\n        elif isinstance(other, PublicInteger):\n            operation = GreaterOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = GreaterOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} >= {other}\")\n\n    def __eq__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> Union[\"Boolean\", \"PublicBoolean\", \"SecretBoolean\"]:\n        if isinstance(other, Integer):\n            return Boolean(value=bool(self.value == other.value))\n        elif isinstance(other, PublicInteger):\n            operation = Equals(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = Equals(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} == {other}\")\n\n@dataclass\nclass PublicInteger(NadaType):\n    def __add__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> Union[\"PublicInteger\", \"SecretInteger\"]:\n        if isinstance(other, Integer):\n            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} + {other}\")\n\n    def __sub__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> Union[\"PublicInteger\", \"SecretInteger\"]:\n        if isinstance(other, Integer):\n            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} - {other}\")\n\n    def __mul__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> Union[\"PublicInteger\", \"SecretInteger\"]:\n        if isinstance(other, Integer):\n            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} * {other}\")\n\n    def __truediv__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"PublicInteger\":\n        if isinstance(other, Integer):\n            operation = Division(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Division(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} / {other}\")\n\n    def __mod__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"PublicInteger\":\n        if isinstance(other, Integer):\n            operation = Modulo(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Modulo(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} % {other}\")\n\n    def __pow__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"PublicInteger\":\n        if isinstance(other, Integer):\n            operation = Power(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Power(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} ** {other}\")\n\n    def __lshift__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"PublicInteger\":\n        if isinstance(other, Integer):\n            operation = LeftShift(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = LeftShift(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} << {other}\")\n\n    def __rshift__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"PublicInteger\":\n        if isinstance(other, Integer):\n            operation = RightShift(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = RightShift(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} >> {other}\")\n\n    def __lt__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"PublicBoolean\":\n        if isinstance(other, Integer):\n            operation = LessThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = LessThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} < {other}\")\n\n    def __gt__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"PublicBoolean\":\n        if isinstance(other, Integer):\n            operation = GreaterThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = GreaterThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} > {other}\")\n\n    def __le__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"PublicBoolean\":\n        if isinstance(other, Integer):\n            operation = LessOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = LessOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} <= {other}\")\n\n    def __ge__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"PublicBoolean\":\n        if isinstance(other, Integer):\n            operation = GreaterOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = GreaterOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} >= {other}\")\n\n    def __eq__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"PublicBoolean\":\n        if isinstance(other, Integer):\n            operation = Equals(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Equals(left=self, right=other, source_ref=SourceRef.back_frame())\n            return PublicBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} == {other}\")\n\n@dataclass\nclass SecretInteger(NadaType):\n    def __add__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> \"SecretInteger\":\n        if isinstance(other, Integer):\n            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = Addition(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} + {other}\")\n\n    def __sub__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> \"SecretInteger\":\n        if isinstance(other, Integer):\n            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = Subtraction(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} - {other}\")\n\n    def __mul__(\n        self, other: Union[\"Integer\", \"PublicInteger\", \"SecretInteger\"]\n    ) -> \"SecretInteger\":\n        if isinstance(other, Integer):\n            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = Multiplication(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} * {other}\")\n\n    def __truediv__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"SecretInteger\":\n        if isinstance(other, Integer):\n            operation = Division(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Division(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} / {other}\")\n\n    def __mod__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"SecretInteger\":\n        if isinstance(other, Integer):\n            operation = Modulo(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Modulo(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} % {other}\")\n\n    def __pow__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"SecretInteger\":\n        if isinstance(other, Integer):\n            operation = Power(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = Power(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} ** {other}\")\n\n    def __lshift__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"SecretInteger\":\n        if isinstance(other, Integer):\n            operation = LeftShift(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = LeftShift(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} << {other}\")\n\n    def __rshift__(\n        self, other: Union[\"Integer\", \"PublicInteger\"]\n    ) -> \"SecretInteger\":\n        if isinstance(other, Integer):\n            operation = RightShift(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        elif isinstance(other, PublicInteger):\n            operation = RightShift(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretInteger(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} >> {other}\")\n\n    def __lt__(\n        self, other: Union[\"Integer\", \"SecretInteger\"]\n    ) -> \"SecretBoolean\":\n        if isinstance(other, Integer):\n            operation = LessThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = LessThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} < {other}\")\n\n    def __gt__(\n        self, other: Union[\"Integer\", \"SecretInteger\"]\n    ) -> \"SecretBoolean\":\n        if isinstance(other, Integer):\n            operation = GreaterThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = GreaterThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} > {other}\")\n\n    def __le__(\n        self, other: Union[\"Integer\", \"SecretInteger\"]\n    ) -> \"SecretBoolean\":\n        if isinstance(other, Integer):\n            operation = LessOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = LessOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} <= {other}\")\n\n    def __ge__(\n        self, other: Union[\"Integer\", \"SecretInteger\"]\n    ) -> \"SecretBoolean\":\n        if isinstance(other, Integer):\n            operation = GreaterOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = GreaterOrEqualThan(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} >= {other}\")\n\n    def __eq__(\n        self, other: Union[\"Integer\", \"SecretInteger\"]\n    ) -> \"SecretBoolean\":\n        if isinstance(other, Integer):\n            operation = Equals(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        elif isinstance(other, SecretInteger):\n            operation = Equals(left=self, right=other, source_ref=SourceRef.back_frame())\n            return SecretBoolean(inner=operation)\n        else:\n            raise TypeError(f\"Invalid operation: {self} == {other}\")\n\n","simple_literals.py":"from nada_dsl import *\n\n\ndef nada_main():\n    party1 = Party(name=\"Party1\")\n    A = SecretInteger(Input(name=\"A\", party=party1))\n    C = SecretInteger(Input(name=\"C\", party=party1))\n\n    TMP0 = A * Integer(13) + Integer(13)    # secret * literal + literal (checks literal re-use)\n    TMP1 = C * Integer(50)                  # secret * literal\n    TMP2 = Integer(13) + Integer(50)        # literal + literal\n    TMP3 = Integer(13) * Integer(50)        # literal * literal\n\n    O = TMP0 + TMP1 + TMP2 + TMP3\n\n    return [Output(O, \"O\", party1)]\n"}}